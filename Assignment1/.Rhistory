real_plot3 <- ggplot(posterior2) +
geom_histogram(aes(`prior_b_DiagnosisASD:Visit`), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(`b_DiagnosisASD:Visit`), fill = "green", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(`b_DiagnosisTD:Visit`), fill = "yellow", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the slope by visit")
real_plot3
real_plot4 <- ggplot(posterior2) +
geom_histogram(aes(prior_sd_Child.ID__Visit), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(sd_Child.ID__Visit), fill = "green", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the variability of the slope")
real_plot4
real_plot5 <- ggplot(posterior2) +
geom_histogram(aes(prior_cor_Child.ID), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(cor_Child.ID__Intercept__Visit), fill = "blue", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the correlation")
real_plot5
plot1 <- ggplot(posterior) +
geom_histogram(aes(prior_b_DiagnosisASD), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(b_DiagnosisASD), fill = "green", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(b_DiagnosisTD), fill = "yellow", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the intercepts")
plot1
plot2 <- ggplot(posterior) +
geom_histogram(aes(prior_sd_ID__Intercept), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(sd_ID__Intercept), fill = "green", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the intercepts")
plot2
plot3 <- ggplot(posterior) +
geom_histogram(aes(`prior_b_DiagnosisASD:Visit`), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(`b_DiagnosisASD:Visit`), fill = "green", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(`b_DiagnosisTD:Visit`), fill = "yellow", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the slope by visit")
plot3
plot4 <- ggplot(posterior) +
geom_histogram(aes(prior_sd_ID__Visit), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(sd_ID__Visit), fill = "green", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the variability of the slope")
plot4
plot5 <- ggplot(posterior) +
geom_histogram(aes(prior_cor_ID), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(cor_ID__Intercept__Visit), fill = "blue", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the correlation")
plot5
View(df)
View(real_df)
View(real_df)
View(real_df_sub)
View(real_df)
# Defining formulas
ind_m1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z (1 + Visit|ID))
env_m2 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
ind_env_m3 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
# Defining formulas
ind_m1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z (1 + Visit|ID))
env_m2 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
ind_env_m3 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
real_model_fit2 <- brm(
ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Defining formulas
ind_m1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z (1 + Visit|Child.ID))
env_m2 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
ind_env_m3 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
real_model_fit2 <- brm(
ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
ind_m1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z (1 + Visit|Child.ID))
env_m2 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
ind_env_m3 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
real_model_fit2 <- brm(
ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
real_model_fit2 <- brm(
ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
# Run through analysis pipeline
# Subset
real_df_sub <- real_df %>%
select(Visit, Child.ID, Diagnosis, CHI_MLU) %>%
filter(CHI_MLU != 0) %>%
filter(CHI_MLU != "na")
# Define formula
r_m0 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + (1 + Visit|ID))
# Define priors
p2 <- c(
prior(normal(0, 0.1), class = b),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisTD"),
prior(normal(0, 0.1), class = sd, coef = Intercept, group = Child.ID),
prior(normal(0, 0.05), class = sd, coef = Visit, group = Child.ID)
)
# Fitting priors
real_prior_fit <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = "only", backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Run through analysis pipeline
# Subset
real_df_sub <- real_df %>%
select(Visit, Child.ID, Diagnosis, CHI_MLU) %>%
filter(CHI_MLU != 0) %>%
filter(CHI_MLU != "na")
# Define formula
r_m0 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit + (1 + Visit|Child.ID))
# Define priors
p2 <- c(
prior(normal(0, 0.1), class = b),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisTD"),
prior(normal(0, 0.1), class = sd, coef = Intercept, group = Child.ID),
prior(normal(0, 0.05), class = sd, coef = Visit, group = Child.ID)
)
# Fitting priors
real_prior_fit <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = "only", backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Fitting model
real_model_fit1 <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
#get_prior(m2, data = real_df)
#get_prior(m1, data = df)
# Check priors
pp_check(real_prior_fit, ndraws = 100)
# Check model
pp_check(real_model_fit1, ndraws = 100)
# Subset
real_df_sub <- real_df %>%
select(Visit, Child.ID, Diagnosis, CHI_MLU) %>%
filter(CHI_MLU != 0) %>%
filter(CHI_MLU != "na") %>%
mutate(Diagnosis = as.factor(Diagnosis))
# Define formula
r_m0 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit + (1 + Visit|Child.ID))
# Define priors
p2 <- c(
prior(normal(0, 0.1), class = b),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisTD"),
prior(normal(0, 0.1), class = sd, coef = Intercept, group = Child.ID),
prior(normal(0, 0.05), class = sd, coef = Visit, group = Child.ID)
)
# Fitting priors
real_prior_fit <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = "only", backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Fitting priors
real_prior_fit <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = "only", backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Fitting model
real_model_fit1 <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Check priors
pp_check(real_prior_fit, ndraws = 100)
# Check model
pp_check(real_model_fit1, ndraws = 100)
posterior2 <- as_draws_df(real_model_fit2)
posterior2 <- as_draws_df(real_model_fit1)
real_plot1 <- ggplot(posterior2) + geom_histogram(aes(prior_b_DiagnosisASD), fill = "red", color = "black", alpha = 0.3, bins = 50) + geom_histogram(aes(b_DiagnosisASD), fill = "green", color = "black", alpha = 0.3, bins = 50) + geom_histogram(aes(b_DiagnosisTD), fill = "yellow", color = "black", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check on the intercepts")
real_plot1
real_plot2 <- ggplot(posterior2) + geom_histogram(aes(prior_sd_Child.ID__Intercept), fill = "red", color = "black", alpha = 0.3, bins = 50) + geom_histogram(aes(sd_Child.ID__Intercept), fill = "green", color = "black", alpha = 0.3, bins = 50) + xlab("Prior-posterior update check on the intercepts")
real_plot2
real_plot3 <- ggplot(posterior2) +
geom_histogram(aes(`prior_b_DiagnosisASD:Visit`), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(`b_DiagnosisASD:Visit`), fill = "green", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(`b_DiagnosisTD:Visit`), fill = "yellow", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the slope by visit")
real_plot3
real_plot4 <- ggplot(posterior2) +
geom_histogram(aes(prior_sd_Child.ID__Visit), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(sd_Child.ID__Visit), fill = "green", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the variability of the slope")
real_plot4
real_plot5 <- ggplot(posterior2) +
geom_histogram(aes(prior_cor_Child.ID), fill = "red", color = "black", alpha = 0.3, bins = 50) +
geom_histogram(aes(cor_Child.ID__Intercept__Visit), fill = "green", color = "black", alpha = 0.3, bins = 50) +
xlab("Prior-posterior update check on the correlation")
real_plot5
# Defining formulas
ind_m1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z (1 + Visit|Child.ID))
env_m2 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
ind_env_m3 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
real_model_fit2 <- brm(
ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
real_model_fit2 <- brm(
ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal))
real_model_fit2 <- brm(ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
ind_m1 <- bf(MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + (1 + Visit|Child.ID))
env_m2 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
ind_env_m3 <- bf(types_CHI ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
real_model_fit2 <- brm(ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
ind_m1 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + (1 + Visit|Child.ID))
env_m2 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
ind_env_m3 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit|Child.ID))
real_model_fit2 <- brm(ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
histogram(real_df$verbalIQ1)
hist(real_df$verbalIQ1)
real_df <- real_df %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1))
real_df <- real_df %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1))
real_df <- real_df %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1), MOT_MLU1_z = (MOT_MLU1_z - mean(MOT_MLU1_z))/sd(MOT_MLU1_z), types_MOT1_z = (types_MOT1 - mean(types_MOT1))/sd(types_MOT1), tokens_MOT1_z = (tokens_MOT1 - mean(tokens_MOT1))/sd(tokens_MOT1))
real_df <- real_df %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1), MOT_MLU1_z = (MOT_MLU1 - mean(MOT_MLU1))/sd(MOT_MLU1), types_MOT1_z = (types_MOT1 - mean(types_MOT1))/sd(types_MOT1), tokens_MOT1_z = (tokens_MOT1 - mean(tokens_MOT1))/sd(tokens_MOT1))
real_df <- real_df %>%
filter(Child.ID != 1)
real_df <- real_df %>%
filter(Child.ID != 1) %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1), MOT_MLU1_z = (MOT_MLU1 - mean(MOT_MLU1))/sd(MOT_MLU1), types_MOT1_z = (types_MOT1 - mean(types_MOT1))/sd(types_MOT1), tokens_MOT1_z = (tokens_MOT1 - mean(tokens_MOT1))/sd(tokens_MOT1))
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
select("Child.ID", "Visit", "MOT_MLU") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU))
View(visit1_MOT_MLU)
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA")
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit", "MOT_MLU") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU))
real_df <- inner_join(real_df, visit1_MOT_MLU, by = "ID")
real_df <- inner_join(real_df, visit1_MOT_MLU, by = "Child.ID")
View(real_df)
real_df <- real_df %>%
filter(Child.ID != 1) %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1), MOT_MLU1_z = (MOT_MLU1 - mean(MOT_MLU1))/sd(MOT_MLU1), types_MOT1_z = (types_MOT1 - mean(types_MOT1))/sd(types_MOT1), tokens_MOT1_z = (tokens_MOT1 - mean(tokens_MOT1))/sd(tokens_MOT1))
real_df <- real_df %>%
filter(Child.ID != 1) %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1), types_MOT1_z = (types_MOT1 - mean(types_MOT1))/sd(types_MOT1), tokens_MOT1_z = (tokens_MOT1 - mean(tokens_MOT1))/sd(tokens_MOT1))
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit", "MOT_MLU", "types_MOT", "tokens_MOT") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU), types_MOT1_z = (types_MOT - mean(types_MOT))/sd(types_MOT), tokens_MOT1_z = (tokens_MOT - mean(tokens_MOT))/sd(tokens_MOT))
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit.x", "MOT_MLU", "types_MOT", "tokens_MOT") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU), types_MOT1_z = (types_MOT - mean(types_MOT))/sd(types_MOT), tokens_MOT1_z = (tokens_MOT - mean(tokens_MOT))/sd(tokens_MOT))
visit1_MOT_MLU <- real_df %>%
filter(Visit.x == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit.x", "MOT_MLU", "types_MOT", "tokens_MOT") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU), types_MOT1_z = (types_MOT - mean(types_MOT))/sd(types_MOT), tokens_MOT1_z = (tokens_MOT - mean(tokens_MOT))/sd(tokens_MOT))
# Load data
real_df <- read_csv("data_clean.csv")
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit", "MOT_MLU", "types_MOT", "tokens_MOT") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU), types_MOT1_z = (types_MOT - mean(types_MOT))/sd(types_MOT), tokens_MOT1_z = (tokens_MOT - mean(tokens_MOT))/sd(tokens_MOT))
View(visit1_MOT_MLU)
real_df <- inner_join(real_df, visit1_MOT_MLU, by = "Child.ID")
View(real_df)
# Load data
real_df <- read_csv("data_clean.csv")
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit", "MOT_MLU", "types_MOT", "tokens_MOT") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU), types_MOT1_z = (types_MOT - mean(types_MOT))/sd(types_MOT), tokens_MOT1_z = (tokens_MOT - mean(tokens_MOT))/sd(tokens_MOT))
real_df_z <- inner_join(real_df, visit1_MOT_MLU, by = "Child.ID")
View(real_df_z)
real_df <- real_df %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1), types_MOT1_z = (types_MOT1 - mean(types_MOT1))/sd(types_MOT1), tokens_MOT1_z = (tokens_MOT1 - mean(tokens_MOT1))/sd(tokens_MOT1))
real_df <- real_df %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1))
real_df <- real_df %>%
filter(Child.ID != 1) %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1))
# Load data
real_df <- read_csv("data_clean.csv")
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit", "MOT_MLU", "types_MOT", "tokens_MOT") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU), types_MOT1_z = (types_MOT - mean(types_MOT))/sd(types_MOT), tokens_MOT1_z = (tokens_MOT - mean(tokens_MOT))/sd(tokens_MOT))
real_df_z <- inner_join(real_df, visit1_MOT_MLU, by = "Child.ID")
real_df <- real_df %>%
filter(Child.ID != 1) %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1))
# Load data
real_df <- read_csv("data_clean.csv")
visit1_MOT_MLU <- real_df %>%
filter(Visit == 1) %>%
filter(MOT_MLU != "NA") %>%
select("Child.ID", "Visit", "MOT_MLU", "types_MOT", "tokens_MOT") %>%
mutate(MOT_MLU1_z = (MOT_MLU - mean(MOT_MLU))/sd(MOT_MLU), types_MOT1_z = (types_MOT - mean(types_MOT))/sd(types_MOT), tokens_MOT1_z = (tokens_MOT - mean(tokens_MOT))/sd(tokens_MOT))
real_df_z <- inner_join(real_df, visit1_MOT_MLU, by = "Child.ID")
real_df_final <- real_df_z %>%
filter(Child.ID != 1) %>%
mutate(Socialization1_z = (Socialization1 - mean(Socialization1))/sd(Socialization1), verbalIQ1_z = (verbalIQ1 - mean(verbalIQ1))/sd(verbalIQ1), nonVerbalIQ1_z = (nonVerbalIQ1 - mean(nonVerbalIQ1))/sd(nonVerbalIQ1))
View(real_df_final)
ind_m1 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit.x + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + (1 + Visit.x|Child.ID))
env_m2 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit.x + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit.x|Child.ID))
ind_env_m3 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit.x + Diagnosis:verbalIQ1_z + Diagnosis:nonVerbalIQ1_z + Diagnosis:Socialization1_z + Diagnosis:MOT_MLU1_z + Diagnosis:types_MOT1_z + Diagnosis:tokens_MOT1_z + (1 + Visit.x|Child.ID))
real_model_fit2 <- brm(ind_m1, data = real_df, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
real_model_fit2 <- brm(ind_m1, data = real_df_final, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
get_prior(ind_m1, data = real_df_final)
real_model_fit4 <- brm(
ind_env_m3, data = real_df_final, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
get_prior(ind_env_m3, data = real_df_final)
p3 <- c(
prior(normal(0, 0.1), class = b),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisASD"),
prior(normal(0.4, 0.1), class = b, coef = "DiagnosisTD"),
prior(normal(0, 0.1), class = sd, coef = Intercept, group = Child.ID),
prior(normal(0, 0.05), class = sd, coef = Visit.x, group = Child.ID)
)
real_model_fit2 <- brm(ind_m1, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal)
real_model_fit2 <- brm(ind_m1, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
pp_check(real_model_fit2)
pp_check(real_model_fit2, ndraws = 100)
real_model_fit3 <- brm(
env_m2, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
real_model_fit3 <- brm(
env_m2, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
real_model_fit4 <- brm(
ind_env_m3, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
pp_check(real_model_fit2, ndraws = 100)
#real_model_fit3 <- brm(env_m2, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
pp_check(real_model_fit3, ndraws = 100)
#real_model_fit4 <- brm(ind_env_m3, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
pp_check(real_model_fit4)
pp_check(real_model_fit2, ndraws = 100)
#real_model_fit3 <- brm(env_m2, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
pp_check(real_model_fit3, ndraws = 100)
#real_model_fit4 <- brm(ind_env_m3, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
pp_check(real_model_fit4, ndraws = 100)
summary(real_model_fit1)
pacman::p_load(tidyverse, brms, cmdstanr, ggpubr)
# Wrapping plots
ggarrange(real_plot1, real_plot2, real_plot3, real_plot4, real_plot5, rremove("x.text"), ncol = 2, nrow = 3)
ggarrange(plot1, plot2, plot3, plot4, plot5, rremove("x.text"), ncol = 2, nrow = 3)
# Model output
summary(real_model_fit1)
# Model output
summary(model_fit1)
# Model output
summary(model_fit)
# Checking priors
pp_check(prior_fit, ndraws = 100)
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis) + geom_smooth())
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth()
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth(formula = lm)
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth()
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth(method = "lm")
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth(method = "exp")
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + stat_smooth()
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth()
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_point()
ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth(color = Diagnosis)
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth(color = "Diagnosis")
predictor1
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth(aes(color = Diagnosis))
predictor1
predictor2 <- ggplot(real_df_final, aes(Socialization1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor2
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth()
predictor1
predictor2 <- ggplot(real_df_final, aes(Socialization1_z, CHI_MLU, color = Diagnosis)) + geom_smooth()
predictor2
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth(stat = "smooth")
predictor1
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth(stat = "smooth", position = "identity")
predictor1
predictor3 <- ggplot(real_df_final, aes(types_MOT1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor3
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth( method="loess") + geom_point()
predictor1
predictor4 <- ggplot(real_df_final, aes(nonVerbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor5 <- ggplot(real_df_final, aes(MOT_MLU1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor5
predictor6 <- ggplot(real_df_final, aes(tokens_MOT_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth( method="glm") + geom_point()
predictor1
predictor6 <- ggplot(real_df_final, aes(tokens_MOT1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor6
ggarrange(predictor1, predictor2, predictor3, predictor4, predictor5, rremove("x.text"), ncol = 2, nrow = 3)
predictor1 <- ggplot(real_df_final, aes(verbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_smooth() + geom_point()
predictor1
predictor2 <- ggplot(real_df_final, aes(Socialization1_z, CHI_MLU, color = Diagnosis)) + geom_smooth() + geom_point()
predictor2
predictor3 <- ggplot(real_df_final, aes(types_MOT1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor3
predictor4 <- ggplot(real_df_final, aes(nonVerbalIQ1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor4
predictor5 <- ggplot(real_df_final, aes(MOT_MLU1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor5
predictor6 <- ggplot(real_df_final, aes(tokens_MOT1_z, CHI_MLU, color = Diagnosis)) + geom_point() + geom_smooth()
predictor6
ggarrange(predictor1, predictor2, predictor3, predictor4, predictor5, rremove("x.text"), ncol = 2, nrow = 3)
loo_compare(real_model_fit1, real_model_fit2, real_model_fit3, real_model_fit4)
real_model_fit1 <- add_criterion(real_model_fit1, criterion = "loo")
real_model_fit1 <- add_criterion(real_model_fit1, criterion = "loo", moment_match
= "TRUE")
real_model_fit2 <- add_criterion(real_model_fit2, criterion = "loo", moment_match
= "TRUE")
# Add criterions to models
real_model_fit1 <- add_criterion(real_model_fit1, criterion = "loo", moment_match
= "TRUE")
real_model_fit2 <- add_criterion(real_model_fit2, criterion = "loo", moment_match
= "TRUE")
real_model_fit3 <- add_criterion(real_model_fit3, criterion = "loo", moment_match
= "TRUE")
View(real_model_fit1)
real_model_fit2 <- add_criterion(real_model_fit2, criterion = "loo")
real_model_fit4 <- add_criterion(real_model_fit4, criterion = "loo")
real_model_fit3 <- add_criterion(real_model_fit3, criterion = "loo")
loo_compare(real_model_fit1, real_model_fit2, real_model_fit3, real_model_fit4)
real_model_fit1 <- add_criterion(real_model_fit1, criterion = "loo")
real_model_fit2 <- add_criterion(real_model_fit2, criterion = "loo")
real_model_fit3 <- add_criterion(real_model_fit3, criterion = "loo")
real_model_fit4 <- add_criterion(real_model_fit4, criterion = "loo")
loo_compare(real_model_fit1, real_model_fit2, real_model_fit3, real_model_fit4)
# Fitting priors
real_prior_fit <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = "only", backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Fitting models
real_model_fit2 <- brm(ind_m1, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
#real_model_fit3 <- brm(env_m2, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian
#real_model_fit4 <- brm(ind_env_m3, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussia
real_model_fit1 <- add_criterion(real_model_fit1, criterion = "loo")
real_model_fit2 <- add_criterion(real_model_fit2, criterion = "loo")
real_model_fit3 <- add_criterion(real_model_fit3, criterion = "loo")
real_model_fit4 <- add_criterion(real_model_fit4, criterion = "loo")
loo_compare(real_model_fit1, real_model_fit2, real_model_fit3, real_model_fit4)
# Fitting model
real_model_fit1 <- brm(
r_m0, data = real_df_sub, prior = p2, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
# Fitting models
real_model_fit2 <- brm(ind_m1, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
real_model_fit3 <- brm(env_m2, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
real_model_fit4 <- brm(ind_env_m3, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian)
real_model_fit_loo1 <- add_criterion(real_model_fit1, criterion = "loo")
real_model_fit_loo2 <- add_criterion(real_model_fit2, criterion = "loo")
real_model_fit_loo3 <- add_criterion(real_model_fit3, criterion = "loo")
real_model_fit_loo4 <- add_criterion(real_model_fit4, criterion = "loo")
loo_compare(real_model_fit_loo1, real_model_fit_loo2, real_model_fit_loo3, real_model_fit_loo4)
View(real_model_fit1)
View(real_model_fit_loo1)
View(real_model_fit1)
real_model_fit_loo2 <- add_criterion(real_model_fit2, criterion = "loo")
real_model_fit_loo3 <- add_criterion(real_model_fit3, criterion = "loo")
real_model_fit_loo4 <- add_criterion(real_model_fit4, criterion = "loo")
real_model_fit_loo1 <- add_criterion(real_model_fit1, criterion = "loo", moment_match = TRUE)
# Split in k folds
kfold1 <- kfold(real_model_fit1, folds = "stratified", group = "Child.ID", K = 5,save_fits = TRUE)
# Split in k folds
kfold1 <- kfold(real_model_fit1, folds = "stratified", group = "Child.ID", K = 5,save_fits = TRUE)
```
kfold3 <- kfold(real_model_fit3, folds = "stratified", group = "Child.ID", K = 5,save_fits = TRUE)
kfold2 <- kfold(real_model_fit2, folds = "stratified", group = "Child.ID", K = 5,save_fits = TRUE)
kfold2 <- kfold(real_model_fit2, folds = "stratified", group = "Child.ID", K = 5,save_fits = TRUE)
sqrt(mean((yrep_mean
-
y)^2
sqrt(mean((yrep_mean
kfold4 <- kfold(real_model_fit4, folds = "stratified", group = "Child.ID", K = 5,save_fits = TRUE)
# Define loss function
rmse <- function(y,yrep) {
yrep_mean <- colMeans(yrep)
sqrt(mean((yrep_mean-y)^2))
}
# Predict responses and evaluate the loss
kfp <- kfold_predict(kfold1)
kfp_test <- kfold_predict(kfold1)
kfp1 <- kfold_predict(kfold1)
kfp_test1 <- kfold_predict(kfold1)
kfp2 <- kfold_predict(kfold2)
kfp_test2 <- kfold_predict(kfold2)
kfp3 <- kfold_predict(kfold3)
kfp_test3 <- kfold_predict(kfold3)
kfp4 <- kfold_predict(kfold4)
kfp_test4 <- kfold_predict(kfold4)
View(kfp1)
View(kfp_test)
rmse(kfp1)
rmse(kfp1$y, kfp1$yrep)
rmse(kfp2$y, kfp2$yrep)
rmse(kfp3$y, kfp3$yrep)
rmse(kfp4$y, kfp4$yrep)
rmse(kfp3$y, kfp3$yrep)
rmse(kfp4$y, kfp4$yrep)
View(kfp_test1)
loo_compare_weights(real_model_fit_loo1, real_model_fit_loo2, real_model_fit_loo3, real_model_fit_loo4)
loo_compare(real_model_fit_loo1, real_model_fit_loo2, real_model_fit_loo3, real_model_fit_loo4)
loo_model_weights(real_model_fit_loo1, real_model_fit_loo2, real_model_fit_loo3, real_model_fit_loo4)
loo_compare(real_model_fit_loo1, real_model_fit_loo2, real_model_fit_loo3, real_model_fit_loo4)
loo_model_weights(real_model_fit_loo2, real_model_fit_loo3, real_model_fit_loo4)
test_m0 <- bf(CHI_MLU ~ 0 + Diagnosis + Diagnosis:Visit.x + (1 + Visit.x|Child.ID))
real_model_fit1_test <- brm(
test_m0, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = lognormal
)
real_model_fit1_test <- brm(
test_m0, data = real_df_final, prior = p3, sample_prior = T, backend = "cmdstanr", chains = 2, cores = 2, control = list(adapt_delta = 0.99, max_treedepth = 20), family = gaussian
)
real_model_fit1_test <- add_criterion(real_model_fit1_test, criterion = "loo", moment_match = TRUE)
rmse(kfp1$y, kfp1$yrep)
rmse(kfp_test1$y, kfp_test1$yrep)
rmse(kfp2$y, kfp2$yrep)
rmse(kfp_test2$y, kfp_test2$yrep)
rmse(kfp3$y, kfp3$yrep)
rmse(kfp_test3$y, kfp_test3$yrep)
rmse(kfp4$y, kfp4$yrep)
rmse(kfp_test4$y, kfp_test4$yrep)
